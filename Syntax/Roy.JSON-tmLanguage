{ "name": "Roy",
  "scopeName": "source.roy",
  "fileTypes": ["roy"],
  "patterns": [
    {
      "name": "comment.line.double-slash.roy",
      "match": "//.*$"
    },
    {
      "name": "comment.line.number-sign.roy",
      "match": "^#!.*$"
    },
    {
      "name": "string.roy",
      "begin": "\"|'",
      "beginCaptures": {
          "0": { "name": "punctuation.definition.string.begin.roy" }
      },
      "end": "\"|'",
      "endCaptures": {
          "0": { "name": "punctuation.definition.string.end.roy" }
      }
    },
    {
      "name": "let.binding.roy",
      "match": "(let)\\s+(.+?)(\\s+\\(?\\s*((.+?)(\\s*:\\s*(.+?))?)\\s*\\)?\\s+)*(\\s*:\\s*(.+?))?\\s*(=)",
      "captures": {
        "1": { "name": "keyword.other.let.roy" },
        "2": { "name": "entity.name.function.roy" },
        "5": { "name": "variable.parameter.roy" },
        "7": { "name": "entity.name.type.roy" },
        "9": { "name": "entity.name.type.roy" },
        "10": { "name": "keyword.operator.roy" }
      }
    },
    {
      "name": "lambda.roy",
      "match": "(\\\\|λ)\\s*(.+?)?\\s*(->|→)",
      "captures": {
        "1": { "name": "keyword.other.lambda.roy" },
        "2": { "name": "variable.parameter.roy" },
        "3": { "name": "keyword.operator.lambda.roy" }
      }
    },
    {
      "name": "type.roy",
      "match": "(type)\\s+([^=\\s]+)\\s*",
      "captures": {
        "1": { "name": "keyword.other.type.roy" },
        "2": { "name": "entity.name.type.roy" }
      }
    },
    {
      "name": "data.roy",
      "match": "(data)\\s+([^=\\s]+)\\s*",
      "captures": {
        "1": { "name": "keyword.other.data.roy" },
        "2": { "name": "entity.name.type.roy" }
      }
    },
    {
      "include": "#class"
    },
    {
      "include": "#console"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#numeric"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "class": {
      "patterns": [
        {
          "name": "function.array.roy",
          "match": "\\b(Array)\\.(concat|constructor|every|filter|forEach|indexOf|isArray|join|lastIndexOf|length|map|pop|prototype|push|reduce|reduceRight|reverse|shift|slice|some|sort|splice|toSource|toString|unshift)\\b",
          "captures": {
            "1": { "name": "support.type.array.roy" },
            "2": { "name": "support.function.array.roy" }
          }
        },
        {
          "name": "function.boolean.roy",
          "match": "\\b(Boolean)\\.(constructor|prototype|toSource|toString|valueOf)\\b",
          "captures": {
            "1": { "name": "support.type.boolean.roy" },
            "2": { "name": "support.function.boolean.roy" }
          }
        },
        {
          "name": "function.date.roy",
          "match": "\\b(Date)\\.(constructor|getDate|getDay|getFullYear|getHours|getMilliseconds|getMinutes|getMonth|getSeconds|getTime|getTimezoneOffset|getUTCDate|getUTCDay|getUTCFullYear|getUTCHours|getUTCMilliseconds|getUTCMinutes|getUTCMonth|getUTCSeconds|getYear|now|parse|prototype|setDate|setFullYear|setHours|setMilliseconds|setMinutes|setMonth|setTime|setUTCDate|setUTCFullYear|setUTCHours|setUTCMilliseconds|setUTCMinutes|setUTCMonth|setUTCSeconds|setYear|toDateString|toGMTString|toISOString|toJSON|toLocaleDateString|toLocaleFormat|toLocaleString|toLocaleTimeString|toSource|toString|toTimeString|toUTCString|UTC|valueOf)\\b",
          "captures": {
            "1": { "name": "support.type.date.roy" },
            "2": { "name": "support.function.date.roy" }
          }
        },
        {
          "name": "constants.math.roy",
          "match": "\\b(Math)\\.(E|LN2|LN10|LOG2E|LOG10E|PI|SQRT1_2|SQRT2)\\b",
          "captures": {
            "1": { "name": "support.type.math.roy" },
            "2": { "name": "support.constant.math.roy" }
          }
        },
        {
          "name": "function.math.roy",
          "match": "\\b(Math)\\.(abs|acos|asin|atan|atan2|ceil|cos|exp|floor|imul|log|max|min|pow|random|round|sin|sqrt|tan|toSource)\\b",
          "captures": {
            "1": { "name": "support.type.math.roy" },
            "2": { "name": "support.function.math.roy" }
          }
        },
        {
          "name": "constants.number.roy",
          "match": "\\b(Number)\\.(MAX_VALUE|MIN_VALUE|NaN|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b",
          "captures": {
            "1": { "name": "support.type.number.roy" },
            "2": { "name": "support.constant.number.roy" }
          }
        },
        {
          "name": "function.number.roy",
          "match": "\\b(Number)\\.(isFinite|isInteger|isNaN|prototype|toExponential|toFixed|toInteger|toLocaleString|toPrecision|toSource|toString|valueOf)\\b",
          "captures": {
            "1": { "name": "support.type.number.roy" },
            "2": { "name": "support.function.number.roy" }
          }
        },
        {
          "name": "function.object.roy",
          "match": "\\b(Object)\\.(__count__|__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__|__noSuchMethod__|__parent__|__proto__|constructor|create|defineProperties|defineProperty|eval|freeze|getOwnPropertyDescriptor|getOwnPropertyNames|getPrototypeOf|hasOwnProperty|is|isExtensible|isFrozen|isPrototypeOf|isSealed|keys|preventExtensions|propertyIsEnumerable|prototype|seal|toLocaleString|toSource|toString|unwatch|valueOf|watch)\\b",
          "captures": {
            "1": { "name": "support.type.object.roy" },
            "2": { "name": "support.function.object.roy" }
          }
        },
        {
          "name": "function.regexp.roy",
          "match": "\\b(RegExp)\\.(constructor|exec|global|ignoreCase|lastIndex|multiline|prototype|source|sticky|test|toSource|toString)\\b",
          "captures": {
            "1": { "name": "support.type.regexp.roy" },
            "2": { "name": "support.function.regexp.roy" }
          }
        },
        {
          "name": "function.string.roy",
          "match": "\\b(String)\\.(charAt|charCodeAt|concat|constructor|contains|endsWith|fromCharCode|indexOf|lastIndexOf|length|localeCompare|match|prototype|quote|replace|search|slice|split|startsWith|substr|substring|toLocaleLowerCase|toLocaleUpperCase|toLowerCase|toSource|toString|toUpperCase|trim|trimLeft|trimRight|valueOf)\\b",
          "captures": {
            "1": { "name": "support.type.string.roy" },
            "2": { "name": "support.function.string.roy" }
          }
        },
        {
          "name": "support.type.roy",
          "match": "\\b(Array|Boolean|Date|(Eval|Range|Reference|Syntax|Type|URI)?Error|Number|Object|RegExp|String)\\b"
        }
      ]
    },
    "console": {
      "patterns": [
        {
          "name": "console.roy",
          "match": "\\b(console)\\.(assert|debug|log|dir|error|group|groupCollapsed|groupEnd|info|log|time|timeEnd|trace|warn)\\b",
          "captures": {
            "1": { "name": "support.type.console.roy" },
            "2": { "name": "support.function.console.roy" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "constant.language.boolean.roy",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.roy",
          "match": "\\b(data|let|type)\\b"
        },
        {
          "name": "keyword.control.roy",
          "match": "\\b(bind|case|do|else|if|match|return|then)\\b"
        }
      ]
    },
    "numeric": {
      "patterns": [
        {
          "name": "constant.numeric.roy",
          "match": "\\b([+-]?\\d+(\\.\\d+)?([Ee][+-]?\\d+)?)\\b"
        },
        {
          "name": "support.constant.roy",
          "match": "Infinity|NaN",
          "comment": "Magic numbers."
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "assignment.operator.roy",
          "match": "=|<-|->|←|→|⇒",
          "captures": {
            "0": { "name": "keyword.operator.roy" }
          }
        },
        {
          "name": "binary.operator.roy",
          "match": "\\+|-|\\*|/|%",
          "captures": {
            "0": { "name": "keyword.operator.roy" }
          }
        }
      ]
    }
  },
  "uuid": "7943d659-7d53-422f-86a5-822900a41b82"
}
